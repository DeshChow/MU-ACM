[{"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\index.js":"1","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ProgrammingSiteDetail\\ProgrammingSiteDetail.js":"2","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\AlgoDetails\\AlgoDetails.js":"3","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Details\\Details.js":"4","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\SingleCard\\SingleCard.js":"5","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\App.js":"6","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\AddContetLink\\AddContestLink.js":"7","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Header\\Header.js":"8","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ContestLinkDetails\\ContestLinkDetails.js":"9","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ContestLinkDetailsInner\\ContestLinkDetailsInner.js":"10","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Home\\Home.js":"11","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\FullCard\\FullCard.js":"12","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ProgrammingSiteDetailInner\\ProgrammingSiteDetailInner.js":"13","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\MemoryDetail\\MemoryDetail.js":"14","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\HomeCard\\HomeCard.js":"15","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ContestLink\\ContestLink.js":"16","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\DsDetails\\DsDetails.js":"17","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Memory\\Memory.js":"18","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\MemoryDetailInner\\MemoryDetailInner.js":"19","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ProgrammingSite\\ProgrammingSite.js":"20","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Algorithm\\Algorithm.js":"21","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\FootItem\\FootItem.js":"22","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\NavBar\\NavBar.js":"23","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\DataStructure\\DataStructure.js":"24","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\NotFound\\NotFound.js":"25"},{"size":500,"mtime":499162500000,"results":"26","hashOfConfig":"27"},{"size":2275,"mtime":1609079850124,"results":"28","hashOfConfig":"27"},{"size":2709,"mtime":1609148899541,"results":"29","hashOfConfig":"27"},{"size":2493,"mtime":1609148706483,"results":"30","hashOfConfig":"27"},{"size":1407,"mtime":1608805318324,"results":"31","hashOfConfig":"27"},{"size":21363,"mtime":1609071874239,"results":"32","hashOfConfig":"27"},{"size":3475,"mtime":1609082274557,"results":"33","hashOfConfig":"27"},{"size":1591,"mtime":1609079703362,"results":"34","hashOfConfig":"27"},{"size":3455,"mtime":1609082338301,"results":"35","hashOfConfig":"27"},{"size":2856,"mtime":1609073791797,"results":"36","hashOfConfig":"27"},{"size":4101,"mtime":1609106324549,"results":"37","hashOfConfig":"27"},{"size":1415,"mtime":1608805197971,"results":"38","hashOfConfig":"27"},{"size":586,"mtime":1608824189745,"results":"39","hashOfConfig":"27"},{"size":2801,"mtime":1609079884566,"results":"40","hashOfConfig":"27"},{"size":535,"mtime":1607158115764,"results":"41","hashOfConfig":"27"},{"size":1666,"mtime":1609082142452,"results":"42","hashOfConfig":"27"},{"size":1058,"mtime":1609080113053,"results":"43","hashOfConfig":"27"},{"size":1620,"mtime":1609056194586,"results":"44","hashOfConfig":"27"},{"size":1331,"mtime":1609053687848,"results":"45","hashOfConfig":"27"},{"size":1713,"mtime":1609056143123,"results":"46","hashOfConfig":"27"},{"size":1740,"mtime":1609080025940,"results":"47","hashOfConfig":"27"},{"size":3840,"mtime":1609149238587,"results":"48","hashOfConfig":"27"},{"size":1331,"mtime":1609078711802,"results":"49","hashOfConfig":"27"},{"size":1553,"mtime":1609079980231,"results":"50","hashOfConfig":"27"},{"size":326,"mtime":1609080913900,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"195ic4b",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"71"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\index.js",[],["114","115"],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ProgrammingSiteDetail\\ProgrammingSiteDetail.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\AlgoDetails\\AlgoDetails.js",["116","117","118","119","120","121","122","123","124","125"],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Details\\Details.js",["126","127","128","129","130","131","132","133","134","135"],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\SingleCard\\SingleCard.js",["136"],"import React, { useContext } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { UserContext } from '../../App';\r\n\r\nconst SingleCard = (props) => {\r\n\r\n    const data=props.cardData;\r\n\r\n    console.log(data);\r\n\r\n    const [userTopic,setUserTopic] = useContext(UserContext);\r\n\r\n    const history=useHistory();\r\n\r\n    const handleClick=(currentData)=>\r\n    {\r\n       \r\n        const currentUserTopic={...userTopic};\r\n\r\n        if(data.topic=='ds')\r\n        {\r\n          \r\n            currentUserTopic.dsID=currentData;\r\n\r\n            history.push('/Details/'+data.id);\r\n        }\r\n        else\r\n        {\r\n            currentUserTopic.algoID=currentData;\r\n\r\n            history.push('/Detailsalgo/'+data.id);\r\n        }\r\n\r\n        setUserTopic(currentUserTopic);\r\n    }\r\n\r\n    return (\r\n        <Card\r\n\r\n            onClick={() =>handleClick(data.id)}\r\n            bg={'Info'.toLowerCase()}\r\n            key={5}\r\n            text={'Info'.toLowerCase() === 'light' ? 'dark' : 'white'}\r\n            style={{ width: '18rem', margin: '20px' }}\r\n            className=\"mb-2\"\r\n        >\r\n            <Card.Header><h3>{data.header}</h3></Card.Header>\r\n            <Card.Body>\r\n\r\n                <Card.Text>\r\n                    {data.detail}\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SingleCard;","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\App.js",["137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152"],"import logo from './logo.svg';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Home from './Components/Home/Home';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport DataStructure from './Components/DataStructure/DataStructure';\nimport Algorithm from './Components/Algorithm/Algorithm';\nimport { Nav } from 'react-bootstrap';\nimport NavBar from './Components/NavBar/NavBar';\nimport Details from './Components/Details/Details';\nimport { createContext, useState } from 'react';\nimport AlgoDetails from './Components/AlgoDetails/AlgoDetails';\nimport ContestLinkDetails from './Components/ContestLinkDetails/ContestLinkDetails';\nimport ProgrammingSiteDetail from './Components/ProgrammingSiteDetail/ProgrammingSiteDetail';\nimport MemoryDetail from './Components/MemoryDetail/MemoryDetail';\nimport AddContestLink from './Components/AddContetLink/AddContestLink';\nimport array from '../src/images/array.png'; \nimport stack1 from '../src/images/stack1.png';\nimport stack2 from '../src/images/stack2.png';\nimport stack31 from '../src/images/stack3-1.png';\nimport stack32 from '../src/images/stack3-2.png';\nimport stack4 from '../src/images/stack4.png';\nimport queue1 from '../src/images/queue1.png';\nimport queue2 from '../src/images/queue2.png';\nimport queue3 from '../src/images/queue3.png';\nimport linkedlist1 from '../src/images/linkedlist1.png';\nimport linkedlist2 from '../src/images/linkedlist2.png';\nimport graph1 from '../src/images/graph.png';\n\n\n\nconst dataDS = [\n\n  {\n    id: 'array',\n    Header: 'Array Data Stucture',\n    Introduction: 'An array is a collection of items stored at contiguous memory locations.It can store a fixed size. The idea is to store multiple items of the same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array).',\n    Description1: 'The following diagram represents an integer array that has 12 elements. The index of the array starts with 0, so the array having 12 elements has indexes from 0 to 11.',\n    Img: 'https://beginnersbook.com/wp-content/uploads/2018/10/array.jpg',\n    Description2: 'In this example we have an array arr of type “int”. The size of the array is 10 which means it can hold 10 integer values. arr[0] would be first element, arr[1] second and so on. Here we are assigning values to only few elements of the array. After this program, I have shared the output of this program, which shows that the default value of the elements of an int array is 0. The elements that are not assigned any value shows their value as 0 (default value).',\n    Description3: '',\n    Description4: '',\n    Description5: '',\n    code:`#include <stdio.h>\n    int main() {\n       int LA[] = {1,3,5,7,8};\n       int item = 10, k = 3, n = 5;\n       int i = 0, j = n;   \n       printf(\"The original array elements are :\");\n       for(i = 0; i<n; i++) {\n          printf(\"LA[%d] = %d \", i, LA[i]);\n       }\n    }`,\n \n\n\n\n  },\n  {\n    id: 'stack',\n    Header: 'Stack Data Stucture',\n    Introduction: 'Stack is a linear data structure which follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out).',\n    Description1: '',\n    Img:'https://www.tutorialspoint.com/data_structures_algorithms/images/stack_representation.jpg',\n    Description2: 'There are many real-life examples of a stack. Consider an example of plates stacked over one another in the canteen. The plate which is at the top is the first one to be removed, i.e. the plate which has been placed at the bottommost position remains in the stack for the longest period of time. So, it can be simply seen to follow LIFO(Last In First Out)/FILO(First In Last Out) order.',\n    Description3: 'A stack can be implemented by means of Array, Structure, Pointer, and Linked List. Stack can either be a fixed size one or it may have a sense of dynamic resizing. Here, we are going to implement stack using arrays, which makes it a fixed size stack implementation.',\n    Description4: '',\n    Description5: '',\n    code:`INIT_STACK (STACK, TOP)\n\n    Algorithm to initialize a stack using array. \n    TOP points to the top-most element of stack.\n\n    1) TOP: = 0;\n    2) Exit\n    \nPUSH_STACK(STACK,TOP,MAX,ITEM)\n\n    Algorithm to push an item into stack.\n            \n    1) IF TOP = MAX   then\n    Print “Stack is full”;\n    Exit;\n    2) Otherwise\n    TOP: = TOP + 1;        /*increment TOP*/\n    STACK (TOP):= ITEM;\n    3) End of IF\n    4) Exit\n    \nPOP_STACK(STACK,TOP,ITEM)\n\n    Algorithm to pop an element from stack.\n\n    1) IF TOP = 0 then\n        Print “Stack is empty”;\n        Exit;\n    2) Otherwise\n        ITEM: =STACK (TOP);\n        TOP:=TOP – 1;\n    3) End of IF\n    4) Exit\n    \nIS_FULL(STACK,TOP,MAX,STATUS)\n\n    Algorithm to check stack is full or not. \n    STATUS contains the result status.\n\n    1) IF TOP = MAX then\n        STATUS:=true;\n    2) Otherwise\n        STATUS:=false;\n    3)  End of IF\n    4)  Exit\n    \n    \nIS_EMPTY(STACK,TOP,MAX,STATUS)\n\n    Algorithm to check stack is empty or not.\n    STATUS contains the result status.\n\n            \n    1) IF TOP = 0 then\n        STATUS:=true;\n    2) Otherwise\n        STATUS:=false;\n    3)  End of IF\n    4)  Exit`,\n \n\n\n\n  },\n  {\n    id: 'queue',\n    Header: 'Queue Data Stucture',\n    Introduction: 'A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO). A good example of a queue is any queue of consumers for a resource where the consumer that came first is served first. The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added.',\n    Img: 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/02/Queue.png',\n    Description2: 'As in stacks, a queue can also be implemented using Arrays, Linked-lists, Pointers and Structures. For the sake of simplicity, we shall implement queues using one-dimensional array.',\n    Description3: '',\n    Description4: '',\n    Description5: '',\n    code:`INIT(QUEUE,FRONT,REAR)\n    This algorithm is used to intialize a QUEUE,FRONT,\n    and REAR.\n        1.\tFRONT := 1;\n        2.\tREAR    := 0;\n        3.\tReturn;\nINSERT-ITEM(QUEUE,FRONT,REAR,MAX,ITEM)\n    This algorithm is used to add or insert item to QUEUE.\n        1.\tIf (REAR  = MAX) then\n            a.\tDisplay “Queue overflow”;\n            b.\tReturn;\n        2.\tOtherwise\n            a.\tREAR := REAR + 1;\n            b.\tQUEUE(REAR) := ITEM;\n        3.\tReturn;\nREMOVE-ITEM(QUEUE,FRONT,REAR,ITEM)\n    This algorithm is used to delete an item from QUEUE.\n        1.\tIf (FRONT = REAR + 1) then\n            a.\tDisplay “Queue underflow”;\n            b.\tReturn;\n        2.\tOtherwise\n            a.\tITEM := QUEUE(FRONT);\n            b.\tFRONT := FRONT + 1;\n        3.\tReturn;\nEMPTY-CHECK(QUEUE,FRONT,REAR,EMPTY)\n    This algorithm is used to check whether \n    a QUEUE is EMPTY or not.\n        1.\tIf (FRONT = REAR + 1) then\n            a.\tEMPTY := true;\n        2.\tOtherwise\n            a.\tEMPTY := false;\n        3.\tReturn;\nFULL-CHECK(QUEUE,FRONT,REAR,MAX,FULL)\n    This algorithm is used to check whether \n    a QUEUE is full or not.\n        1.\tIf ( REAR = MAX ) then\n            a.\tFULL := true;\n        2.\tOtherwise\n            a.\tFULL := false;\n        3.\tReturn;`,\n   \n\n\n\n  },\n  {\n    id: 'linkedlist',\n    Header: 'Linked List Data Stucture',\n    Introduction: 'A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. The elements in a linked list are linked using pointers as shown in the below image:',\n    Img: 'https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2013/03/Linkedlist.png',\n    Description2: 'In simple words, a linked list consists of nodes where each node contains a data field and a reference(link) to the next node in the list.',\n    Description3: '',\n    Description4: '',\n    Description5: '',\n    code:`//insert link at the first location\n            void insertFirst(int key, int data){\n              //create a link\n              struct node *link = (struct node*) malloc(sizeof(struct node));\n              link->key = key;\n              link->data = data;\n            \n              //point it to old first node\n              link->next = head;\n            \n              //point first to new first node\n              head = link;\n          }\n    \n    \n//delete first item\n        struct node* deleteFirst(){\n          //save reference to first link\n          struct node *tempLink = head;\n          \n          //mark next to first link as first \n          head = head->next;\n          \n          //return the deleted link\n          return tempLink;\n        }\n\n\n//display the list\n        void printList(){\n          struct node *ptr = head;\n          printf(\"\\n[ \");\n          \n          //start from the beginning\n          while(ptr != NULL){        \n              printf(\"(%d,%d) \",ptr->key,ptr->data);\n              ptr = ptr->next;\n          }\n          \n          printf(\" ]\");\n        }`,\n  \n\n\n\n  }\n  , {\n    id: 'graph',\n    Header: 'Graph Data Structure',\n    Introduction: 'A Graph is a non-linear data structure consisting of nodes and edges. The nodes are sometimes also referred to as vertices and the edges are lines or arcs that connect any two nodes in the graph.',\n    Img: 'https://www.geeksforgeeks.org/wp-content/uploads/undirectedgraph.png',\n    Description2: 'In the above Graph, the set of vertices V = {0,1,2,3,4} and the set of edges E = {01, 12, 23, 34, 04, 14, 13}.',\n    Description3: 'Graphs are used to solve many real-life problems. Graphs are used to represent networks. The networks may include paths in a city or telephone network or circuit network. Graphs are also used in social networks like linkedIn, Facebook. For example, in Facebook, each person is represented with a vertex(or node). Each node is a structure and contains information like person id, name, gender, locale etc.',\n    Description4: '',\n    Description5: '',\n    code:` #include <iostream>\n\n    using namespace std;\n\n    bool A[10][10];\n\n    void initialize()\n    {\n        for(int i = 0;i < 10;++i)\n            for(int j = 0;j < 10;++j)\n                A[i][j] = false;\n    }\n\n    int main()\n    {\n        int x, y, nodes, edges;\n        initialize();       //Since there is no edge initially\n        cin >> nodes;       //Number of nodes\n        cin >> edges;       //Number of edges\n        for(int i = 0;i < edges;++i)\n        {\n            cin >> x >> y;\n            A[x][y] = true;     //Mark the edges from vertex x to vertex y\n       }\n       if(A[3][4] == true)\n          cout << “There is an edge between 3 and 4” << endl;\n      else \n          cout << “There is no edge between 3 and 4” << endl;\n\n      if(A[2][3] == true)\n          cout << “There is an edge between 2 and 3” << endl;\n      else \n          cout << “There is no edge between 2 and 3” << endl;\n\n      return 0;\n    }`,\n    \n\n\n\n  }\n\n\n\n\n\n]\n\n\nconst dataALGO = [\n\n  {\n    id: 'binarysearch',\n    Header: 'Binary Search',\n    Introduction: 'Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.',\n    Description1: '',\n    Img: 'https://codenuclear.com/wp-content/uploads/2017/07/Binary_Search.jpg',\n    Description2: 'Binary search halves the searchable items and thus reduces the count of comparisons to be made to very less numbers.',\n    Description3: '',\n    Description4: '',\n    Description5: '',\n    code: `Procedure binary_search\n    A ← sorted array\n    n ← size of array\n    x ← value to be searched\n \n    Set lowerBound = 1\n    Set upperBound = n \n \n    while x not found\n       if upperBound < lowerBound \n          EXIT: x does not exists.\n    \n       set midPoint = lowerBound + ( upperBound - lowerBound ) / 2\n       \n       if A[midPoint] < x\n          set lowerBound = midPoint + 1\n          \n       if A[midPoint] > x\n          set upperBound = midPoint - 1 \n \n       if A[midPoint] = x \n          EXIT: x found at location midPoint\n    end while\n    \n end procedure`,\n   \n\n\n\n  },\n  {\n    id: 'bubblesort',\n    Header: 'Bubble Sort',\n    Introduction: 'Bubble sort is a simple sorting algorithm. This sorting algorithm is comparison-based algorithm in which each pair of adjacent elements is compared and the elements are swapped if they are not in order.Lets consider an array with values {5, 1, 6, 2, 4, 3}',\n    Img: 'https://www.studytonight.com/data-structures/images/basic-bubble-sort.png',\n    Description2: 'So as we can see in the representation above, after the first iteration, 6 is placed at the last index, which is the correct position for it.',\n    Description3: 'Similarly after the second iteration, 5 will be at the second last index, and so on.',\n    Description4: '',\n    Description5: '',\n    code:`procedure bubbleSort( list : array of items )\n\n    loop = list.count;\n    \n    for i = 0 to loop-1 do:\n       swapped = false\n     \n       for j = 0 to loop-1 do:\n       \n          /* compare the adjacent elements */   \n          if list[j] > list[j+1] then\n             /* swap them */\n             swap( list[j], list[j+1] )\t\t \n             swapped = true\n          end if\n          \n       end for\n       \n       /*if no number was swapped that means \n       array is sorted now, break the loop.*/\n       \n       if(not swapped) then\n          break\n       end if\n       \n    end for\n    \n end procedure return list`,\n   \n\n\n\n  },\n  {\n    id: 'bfs',\n    Header: 'BFS',\n    Introduction: 'Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures.It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a -search key), and explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level.For Example:',\n    Img: 'https://media.geeksforgeeks.org/wp-content/uploads/bfs-5.png',\n    Description2: 'In the above graph, we start traversal from vertex 2. When we come to vertex 0, we look for all adjacent vertices of it. 2 is also an adjacent vertex of 0. If we don’t mark visited vertices, then 2 will be processed again and it will become a non-terminating process. A Breadth First Traversal of the following graph is 2, 0, 3, 1.',\n    Description3: '',\n    Description4: '',\n    Description5: '',\n    code: `Begin\n    define an empty queue que\n    at first mark all nodes status as unvisited\n    add the start vertex into the que\n    while que is not empty, do\n       delete item from que and set to u\n       display the vertex u\n       for all vertices 1 adjacent with u, do\n          if vertices[i] is unvisited, then\n             mark vertices[i] as temporarily visited\n             add v into the queue\n          mark\n       done\n       mark u as completely visited\n    done\n End`,\n   \n\n\n\n  },\n  {\n    id: 'dfs',\n    Header: 'DFS',\n    Introduction: 'Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures.It traverses in a depthward motion and uses a stack to remember to get the next vertex to start a search, when a dead end occurs in any iteration.',\n    Img: 'https://www.tutorialspoint.com/data_structures_algorithms/images/depth_first_traversal.jpg',\n    Description2: 'As in the example given above, DFS algorithm traverses from S to A to D to G to E to B first, then to F and lastly to C. It employs the following rules.',\n    Description3: '=>Role-1:  Visit the adjacent unvisited vertex. Mark it as visited. Display it. Push it in a stack.',\n    Description4: '=>Role-2: If no adjacent vertex is found, pop up a vertex from the stack. (It will pop up all the vertices from the stack, which do not have adjacent vertices.)',\n    Description5: '=>Role-3:  Repeat Rule 1 and Rule 2 until the stack is empty.',\n    code: `DFS-iterative (G, s):                                   //Where G is graph and s is source vertex\n    let S be stack\n    S.push( s )            //Inserting s in stack \n    mark s as visited.\n    while ( S is not empty):\n        //Pop a vertex from stack to visit next\n        v  =  S.top( )\n       S.pop( )\n       //Push all the neighbours of v in stack that are not visited   \n      for all neighbours w of v in Graph G:\n          if w is not visited :\n                   S.push( w )         \n                  mark w as visited\n\n\n  DFS-recursive(G, s):\n      mark s as visited\n      for all neighbours w of s in Graph G:\n          if w is not visited:\n              DFS-recursive(G, w)`,\n  \n\n\n\n  }\n  , {\n    id: 'segmenttree',\n    Header: 'Segment Tree',\n    Introduction: 'Array is a container which can hold a fix number of items and these items should be of the same type. Most of the data structures make use of arrays to implement their algorithms. Following are the important terms to understand the concept of Array.',\n    Img: \"https://he-s3.s3.amazonaws.com/media/uploads/a0c7f90.jpg\",\n    Description2: '<p>In this example we have an array arr of type “int”. The size of the array is 10 which means it can hold 10 integer values. arr[0] would be first element, arr[1] second and so on. Here we are assigning values to only few elements of the array.After this program, I have shared the output of this program, which shows that the default value of the elements of an int array is 0. The elements that are not assigned any value shows their value as 0 (default value).',\n    Description3: '',\n    Description4: '',\n    Description5: '',\n    code: `void build(int node, int start, int end)\n    {\n        if(start == end)\n        {\n            // Leaf node will have a single element\n            tree[node] = A[start];\n        }\n        else\n        {\n            int mid = (start + end) / 2;\n            // Recurse on the left child\n            build(2*node, start, mid);\n            // Recurse on the right child\n            build(2*node+1, mid+1, end);\n            // Internal node will have the sum of both of its children\n            tree[node] = tree[2*node] + tree[2*node+1];\n        }\n    }\n    \n    \n    void update(int node, int start, int end, int idx, int val)\n{\n    if(start == end)\n    {\n        // Leaf node\n        A[idx] += val;\n        tree[node] += val;\n    }\n    else\n    {\n        int mid = (start + end) / 2;\n        if(start <= idx and idx <= mid)\n        {\n            // If idx is in the left child, recurse on the left child\n            update(2*node, start, mid, idx, val);\n        }\n        else\n        {\n            // if idx is in the right child, recurse on the right child\n            update(2*node+1, mid+1, end, idx, val);\n        }\n        // Internal node will have the sum of both of its children\n        tree[node] = tree[2*node] + tree[2*node+1];\n    }\n}\n\n\nint query(int node, int start, int end, int l, int r)\n{\n    if(r < start or end < l)\n    {\n        // range represented by a node is completely outside the given range\n        return 0;\n    }\n    if(l <= start and end <= r)\n    {\n        // range represented by a node is completely inside the given range\n        return tree[node];\n    }\n    // range represented by a node is partially inside and partially outside the given range\n    int mid = (start + end) / 2;\n    int p1 = query(2*node, start, mid, l, r);\n    int p2 = query(2*node+1, mid+1, end, l, r);\n    return (p1 + p2);\n}`,\n    \n\n\n\n  }\n\n\n\n\n\n]\n\nexport const UserContext = createContext();\nfunction App() {\n\n  const [userTopic, setUserTopic] = useState({\n    dsID: 'array',\n    algoID: 'binarysearch'\n  })\n  return (\n\n    <div >\n\n      <UserContext.Provider value={[userTopic, setUserTopic]}>\n\n        <Router>\n\n          <NavBar></NavBar>\n\n          <Switch>\n\n            <Route path=\"/dataStructure\">\n\n              <DataStructure></DataStructure>\n\n            </Route>\n            <Route path=\"/algorithm\">\n\n              <Algorithm></Algorithm>\n\n            </Route>\n            <Route path=\"/Details/:id\">\n\n              <Details dataDS={dataDS}></Details>\n\n\n            </Route>\n            <Route path=\"/Detailsalgo/:id\">\n\n              <AlgoDetails dataALGO={dataALGO}></AlgoDetails>\n\n\n            </Route>\n            <Route path=\"/ContestLink\">\n\n              <ContestLinkDetails></ContestLinkDetails>\n\n\n            </Route>\n            <Route path=\"/ProgrammingSite\">\n\n              <ProgrammingSiteDetail></ProgrammingSiteDetail>\n\n\n            </Route>\n\n            <Route path=\"/home\">\n\n              <Home></Home>\n\n\n            </Route>\n\n            <Route path=\"/MUMemory\">\n\n              <MemoryDetail></MemoryDetail>\n\n\n            </Route>\n\n            <Route exact path=\"/\">\n\n              <Home></Home>\n\n\n            </Route>\n            <Route path=\"/addAPost\">\n\n              <AddContestLink></AddContestLink>\n\n            </Route>\n\n\n\n\n          </Switch>\n        </Router>\n\n      </UserContext.Provider>\n\n    </div>\n\n\n  );\n}\n\nexport default App;","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\AddContetLink\\AddContestLink.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Header\\Header.js",[],["153","154"],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ContestLinkDetails\\ContestLinkDetails.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ContestLinkDetailsInner\\ContestLinkDetailsInner.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Home\\Home.js",["155","156","157","158"],"import React from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport ContestLink from '../ContestLink/ContestLink';\r\nimport FootItem from '../FootItem/FootItem';\r\nimport Header from '../Header/Header';\r\nimport {AiOutlineLine} from \"react-icons/ai\";\r\nimport HomeCard from '../HomeCard/HomeCard';\r\nimport Memory from '../Memory/Memory';\r\nimport ProgrammingSite from '../ProgrammingSite/ProgrammingSite';\r\nimport { FaWindows } from 'react-icons/fa';\r\n\r\n\r\nconst Home = () => {\r\n\r\n    const dsData = [{\r\n\r\n        topic: 'ds',\r\n        id: 'array',\r\n        header: 'Array',\r\n        detail: 'An array is a collection of items stored at contiguous memory locations.It can store a fixed size'\r\n\r\n    },\r\n    {\r\n\r\n        topic: 'ds',\r\n        id: 'stack',\r\n        header: 'Stack',\r\n        detail: 'Stack is a linear data structure which follows a particular order in which the operations are performed.'\r\n\r\n    },\r\n    {\r\n\r\n        topic: 'ds',\r\n        id: 'queue',\r\n        header: 'Queue',\r\n        detail: 'A Queue is a linear structure which follows a particular order in which the operations are performed.'\r\n\r\n    }\r\n\r\n\r\n\r\n    ]\r\n\r\n    const algoData = [{\r\n\r\n        topic: 'algo',\r\n        id: 'bfs',\r\n        header: 'BFS',\r\n        detail: 'Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures.'\r\n\r\n    },\r\n    {\r\n\r\n        topic: 'algo',\r\n        id: 'dfs',\r\n        header: 'DFS',\r\n        detail: 'Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures.'\r\n\r\n    },\r\n    {\r\n\r\n        topic: 'algo',\r\n        id: 'segmenttree',\r\n        header: 'Segment Tree',\r\n        detail: 'A Segment Tree is a data structure that allows answering range queries over an array effectively, while still being flexible enough to allow modifying the array.'\r\n\r\n    }\r\n\r\n\r\n\r\n    ]\r\n\r\n    const history = useHistory();\r\n\r\n\r\n\r\n    const handleClick = (str) => {\r\n\r\n       \r\n\r\n        history.push('/' + str);\r\n\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <Header></Header>\r\n\r\n            <br></br>\r\n\r\n            <div>\r\n                <div>\r\n                    <h1 style={{ textAlign: 'center',fontFamily: \"cursive\" }}>Data Structure</h1>\r\n                    <div className=\"row\" >  \r\n           <AiOutlineLine size=\"2rem\" style={{marginLeft: \"715px\",color: '#4A0363'}}></AiOutlineLine>\r\n           <AiOutlineLine size=\"2rem\" style={{marginLeft: \"10px\",color: 'tomato'}}></AiOutlineLine>\r\n           <AiOutlineLine size=\"2rem\" style={{marginLeft: \"10px\",color: 'green'}}></AiOutlineLine>\r\n           </div>\r\n\r\n\r\n                    <a onClick={() => handleClick('dataStructure')}  style={{ float: 'right',marginTop: '-30px' }}><b style={{marginLeft: '-70px',cursor: 'pointer'}}>see all</b></a>\r\n                </div>\r\n\r\n              \r\n\r\n\r\n\r\n                <HomeCard data={dsData}></HomeCard>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <div >\r\n                    <h1 style={{ textAlign: 'center',fontFamily: \"cursive\" }}>Algorithm</h1>\r\n                    <div className=\"row\" >  \r\n           <AiOutlineLine size=\"2rem\" style={{marginLeft: \"715px\",color: '#4A0363'}}></AiOutlineLine>\r\n           <AiOutlineLine size=\"2rem\" style={{marginLeft: \"10px\",color: 'tomato'}}></AiOutlineLine>\r\n           <AiOutlineLine size=\"2rem\" style={{marginLeft: \"10px\",color: 'green'}}></AiOutlineLine>\r\n           </div>\r\n\r\n                 \r\n                    <a onClick={() => handleClick('algorithm')}  style={{ float: 'right',marginTop: '-30px' }}><b style={{marginLeft: '-70px',cursor: 'pointer'}}>see all</b></a>\r\n                </div>\r\n\r\n\r\n                <HomeCard data={algoData}></HomeCard>\r\n\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <ContestLink></ContestLink>\r\n\r\n            </div>\r\n\r\n            <div>\r\n\r\n               <ProgrammingSite></ProgrammingSite>\r\n\r\n            </div>\r\n\r\n            <div>\r\n\r\n    <Memory></Memory>\r\n\r\n</div>\r\n\r\n   <FootItem></FootItem>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default Home;","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\FullCard\\FullCard.js",["159"],"import React, { useContext } from 'react';\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport './FullCard.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { UserContext } from '../../App';\r\n\r\nconst FullCard = (props) => {\r\n  \r\n      \r\n    const {header,detail,topic,id}=props.data;\r\n\r\n    const [userTopic,setUserTopic] = useContext(UserContext);\r\n\r\n    console.log('fullcard ID : ',id,header,detail,topic);\r\n\r\n\r\n    \r\n\r\n    const history=useHistory();\r\n\r\n    const handleClick=(currentData)=>{\r\n\r\n     \r\n\r\n     const currentUserTopic={...userTopic};\r\n\r\n        if(topic=='ds')\r\n        {\r\n          \r\n            currentUserTopic.dsID=currentData;\r\n\r\n            history.push('/Details/'+id);\r\n        }\r\n        else\r\n        {\r\n            currentUserTopic.algoID=currentData;\r\n\r\n            history.push('Detailsalgo/'+id);\r\n        }\r\n\r\n        setUserTopic(currentUserTopic);\r\n    }\r\n    return (\r\n        <Card  className=\"text-center CardStyle\">\r\n        <Card.Header className='bg-warning'>\r\n    <h5 style={{color : 'blue'}}>{header}</h5></Card.Header>\r\n        <Card.Body className='bg-info'>\r\n         \r\n          <Card.Text>\r\n            {detail}\r\n          </Card.Text>\r\n          <Button onClick={()=>handleClick(id)}variant=\"dark\">Read More</Button>\r\n        </Card.Body>\r\n      \r\n      </Card>\r\n    );\r\n};\r\n\r\nexport default FullCard;",["160","161"],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ProgrammingSiteDetailInner\\ProgrammingSiteDetailInner.js",["162"],"import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport './ProgrammingSiteDetailInner.css';\r\n\r\n\r\nconst ProgrammingSiteDetailInner = ({d}) => {\r\n\r\n    console.log(d.src)\r\n\r\n\r\n    return (\r\n        <a href={d.src}>\r\n           <Card  style={{height: '450px', marginTop: '30px',  border: '2px solid gray', borderRadius: '5px', marginBottom: '10px'}}  classname=\"pendingcardrev\">\r\n\r\n            <img  src={d.name} style={{width: '100%', height: '100%'}}></img>\r\n\r\n           \r\n\r\n            </Card>\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default ProgrammingSiteDetailInner;","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\MemoryDetail\\MemoryDetail.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\HomeCard\\HomeCard.js",["163","164"],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ContestLink\\ContestLink.js",["165"],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\DsDetails\\DsDetails.js",["166"],"import React from 'react';\r\n\r\nimport './DsDetails.css'\r\n\r\nconst DsDetails = (props) => {\r\n\r\n    const data = props.data[0];\r\n\r\n    //console.log(data.Description2);\r\n\r\n    const {code}=props.data[0];\r\n\r\n    console.log(data);\r\n\r\n    return (\r\n\r\n       \r\n        <div style={{marginLeft: '70px'}}>\r\n            <h1>{data.Header}</h1>\r\n            <br></br>\r\n            <p>{data.Introduction}</p>\r\n            <br></br>\r\n            <p>{data.Description1}</p>\r\n            <br></br>\r\n            <img className=\"ima\" src={data.Img}></img>\r\n            <br></br>\r\n            <p>{data.Description2}</p>\r\n            \r\n            <p>{data.Description3}</p>\r\n         \r\n            <p>{data.Description4}</p>\r\n           \r\n            <p>{data.Description5}</p>\r\n\r\n           <pre style={{backgroundColor:'#e0e0e0', width: '100%',paddingTop:'10px',paddingBottom:'10px',paddingLeft:'10px'}}>\r\n             {\r\n                 code\r\n             }\r\n\r\n           </pre>\r\n          <br/>\r\n         \r\n        </div>\r\n\r\n      \r\n    );\r\n};\r\n\r\nexport default DsDetails;","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Memory\\Memory.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\MemoryDetailInner\\MemoryDetailInner.js",["167"],"import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport './MemoryDetailInner.css';\r\nimport {GiTrophy} from \"react-icons/gi\";\r\n\r\nconst MemoryDetailInner = (props) => {\r\n    \r\n\r\n    const {imgName,name,rank,details}=props.d;\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n             <Card className=\"memorycarddetail\">\r\n                 <br></br>\r\n                 <br></br>\r\n                 <br></br>\r\n                 <h1 style={{marginLeft: '450px', color: 'white', textAlign: 'center',fontStyle: 'italic'}}>{name}</h1>\r\n                 <br></br>\r\n                 <br></br>\r\n                 <h2 style={{marginLeft: '450px', color: 'white', textAlign: 'center'}}><GiTrophy style={{marginTop: '-5px',color: 'green'}}/><span style={{color: 'orange',paddingRight: '10px'}}>Rank:</span><span style={{fontStyle: 'italic'}}>{rank}</span></h2>\r\n                 <br></br>\r\n                 <p style={{marginLeft: '450px', color: 'gray', textAlign: 'justify',padding: '20px'}}>{details}</p>\r\n                 <Card className=\"memorycardnextdetail\"> \r\n                      <img src={imgName}></img>\r\n                 </Card>\r\n             </Card>\r\n           \r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MemoryDetailInner;",["168","169"],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\ProgrammingSite\\ProgrammingSite.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\Algorithm\\Algorithm.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\FootItem\\FootItem.js",["170","171","172"],"import React from 'react';\r\nimport './FootItem.css';\r\nimport {FaFacebook} from \"react-icons/fa\";\r\nimport {AiFillTwitterCircle} from \"react-icons/ai\";\r\nimport {SiWebmoney} from \"react-icons/si\";\r\nimport {AiOutlineWhatsApp} from \"react-icons/ai\";\r\nimport {AiFillTag} from \"react-icons/ai\";\r\nimport {FaGraduationCap} from \"react-icons/fa\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst FootItem = () => {\r\n\r\n\r\n    let history=useHistory();\r\n\r\n     const RouteChange=(path)=>\r\n     {\r\n           history.push(path);\r\n     }\r\n    return (\r\n        <div className=\"footbody\" id=\"foot\">\r\n        <footer class=\"footer\">\r\n            <div class=\"l-footer\">\r\n            <span><FaGraduationCap size=\"3rem\" style={{color:'yellow', marginTop: '-30px'}}/></span> \r\n               <span  style={{ 'fontFamily': 'cursive', 'fontSize': '3rem'}}><b className=\"logg\">MU</b><b>-ACM</b></span>\r\n            <br></br>\r\n            <br></br>\r\n                <p style={{ textAlign: 'justify'}}>Metropolitan University has a great environment for ACM ICPC.Because ACM strengthens the profession's collective voice through strong leadership, promotion of the highest standards, and recognition of technical excellence. ACM supports the professional growth of its members by providing opportunities for life-long learning, career development, and professional networking.</p>\r\n                <br></br>\r\n                <br></br>\r\n\r\n                    <ul class=\"social-icons\">\r\n                        <li><a  className=\"facebook\" href=\"https://www.facebook.com/groups/734057760032501\"><FaFacebook size=\"1.5em\"/></a></li>\r\n                        <li><a className=\"website\" href=\"https://metrouni.edu.bd/\"><SiWebmoney size=\"1.5em\"/></a></li>\r\n                        <li><a className=\"whatsapp\" href=\"https://api.whatsapp.com/send?phone=+8801778482201\"><AiOutlineWhatsApp size=\"1.5em\"/></a></li>   \r\n                    </ul>\r\n            </div>\r\n            <ul class=\"r-footer\" >\r\n                <li>\r\n                    <b className=\"footh2\" >\r\n                        Information </b>\r\n                    <ul class=\"box\" style={{cursor:'pointer'}}>\r\n                        \r\n\r\n                        <li><a href='https://icpc.global/' style={{color: 'white'}}>ACM Global Site</a></li>\r\n\r\n                        <li><a href='https://nordic.icpc.io/' style={{color: 'white'}}>NCPC-Bangladesh</a></li>\r\n\r\n                        <li><a href='https://www.stopstalk.com/dashboard' style={{color: 'white'}}>Find Your Profile</a></li>\r\n\r\n                        <li> <a href='http://www.synapse0.com/' style={{color: 'white'}}>Synapse Site</a></li>\r\n\r\n                        <li> <a href='https://www.facebook.com/BAPS.BGD/' style={{color: 'white'}}>BAPS Facebook Group</a></li>\r\n\r\n                        \r\n\r\n                    </ul>\r\n                </li>\r\n                <li class=\"features\" style={{marginTop:'-5px',marginLeft:'180px', fontSize: '18px', color: '#DDD8D8'}}>\r\n                <b className=\"footh2\" >\r\n                        Contact Us </b>\r\n                <li>\r\n                    <li>Email:</li>\r\n                    <li>muacm2021@gmail.com</li>\r\n                </li>\r\n                    \r\n                        \r\n                       \r\n                </li>\r\n                <li Style={{marginLeft: '-100px'}}>\r\n                    <h2 className=\"footh2\">\r\n                        Address</h2>\r\n                    <ul class=\"box\">\r\n                        <li>Bateshwar, Sylhet-3103, Bangladesh</li>\r\n                    </ul>\r\n                </li>\r\n            </ul>\r\n            <div class=\"b-footer\">\r\n                <p style={{marginTop: '-40px'}}>\r\n                    All rights reserved by ©MU-ACM 2020 </p>\r\n            </div>\r\n        </footer>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FootItem;","C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\NavBar\\NavBar.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\DataStructure\\DataStructure.js",[],"C:\\Users\\deshc\\Documents\\MU-ACM-Full-Project\\mu-acm\\src\\Components\\NotFound\\NotFound.js",[],{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":12,"column":26,"nodeType":"179","messageId":"180","endLine":12,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":24,"column":77,"nodeType":"183","messageId":"184","endLine":24,"endColumn":79},{"ruleId":"185","severity":1,"message":"186","line":32,"column":13,"nodeType":"187","endLine":32,"endColumn":24,"suggestions":"188"},{"ruleId":"181","severity":1,"message":"182","line":36,"column":65,"nodeType":"183","messageId":"184","endLine":36,"endColumn":67},{"ruleId":"189","severity":1,"message":"190","line":49,"column":9,"nodeType":"191","endLine":49,"endColumn":12},{"ruleId":"189","severity":1,"message":"190","line":51,"column":9,"nodeType":"191","endLine":51,"endColumn":75},{"ruleId":"189","severity":1,"message":"190","line":54,"column":9,"nodeType":"191","endLine":54,"endColumn":74},{"ruleId":"189","severity":1,"message":"190","line":57,"column":9,"nodeType":"191","endLine":57,"endColumn":67},{"ruleId":"189","severity":1,"message":"190","line":59,"column":9,"nodeType":"191","endLine":59,"endColumn":66},{"ruleId":"189","severity":1,"message":"190","line":62,"column":9,"nodeType":"191","endLine":62,"endColumn":74},{"ruleId":"177","severity":1,"message":"178","line":14,"column":22,"nodeType":"179","messageId":"180","endLine":14,"endColumn":34},{"ruleId":"181","severity":1,"message":"182","line":28,"column":71,"nodeType":"183","messageId":"184","endLine":28,"endColumn":73},{"ruleId":"185","severity":1,"message":"186","line":34,"column":7,"nodeType":"187","endLine":34,"endColumn":18,"suggestions":"192"},{"ruleId":"181","severity":1,"message":"182","line":41,"column":61,"nodeType":"183","messageId":"184","endLine":41,"endColumn":63},{"ruleId":"189","severity":1,"message":"190","line":53,"column":9,"nodeType":"191","endLine":53,"endColumn":12},{"ruleId":"189","severity":1,"message":"190","line":54,"column":9,"nodeType":"191","endLine":54,"endColumn":68},{"ruleId":"189","severity":1,"message":"190","line":57,"column":9,"nodeType":"191","endLine":57,"endColumn":69},{"ruleId":"189","severity":1,"message":"190","line":60,"column":9,"nodeType":"191","endLine":60,"endColumn":69},{"ruleId":"189","severity":1,"message":"190","line":62,"column":9,"nodeType":"191","endLine":62,"endColumn":73},{"ruleId":"189","severity":1,"message":"190","line":65,"column":9,"nodeType":"191","endLine":65,"endColumn":68},{"ruleId":"181","severity":1,"message":"182","line":21,"column":22,"nodeType":"183","messageId":"184","endLine":21,"endColumn":24},{"ruleId":"177","severity":1,"message":"193","line":1,"column":8,"nodeType":"179","messageId":"180","endLine":1,"endColumn":12},{"ruleId":"177","severity":1,"message":"194","line":3,"column":8,"nodeType":"179","messageId":"180","endLine":3,"endColumn":14},{"ruleId":"177","severity":1,"message":"195","line":11,"column":3,"nodeType":"179","messageId":"180","endLine":11,"endColumn":7},{"ruleId":"177","severity":1,"message":"196","line":15,"column":10,"nodeType":"179","messageId":"180","endLine":15,"endColumn":13},{"ruleId":"177","severity":1,"message":"197","line":24,"column":8,"nodeType":"179","messageId":"180","endLine":24,"endColumn":13},{"ruleId":"177","severity":1,"message":"198","line":25,"column":8,"nodeType":"179","messageId":"180","endLine":25,"endColumn":14},{"ruleId":"177","severity":1,"message":"199","line":26,"column":8,"nodeType":"179","messageId":"180","endLine":26,"endColumn":14},{"ruleId":"177","severity":1,"message":"200","line":27,"column":8,"nodeType":"179","messageId":"180","endLine":27,"endColumn":15},{"ruleId":"177","severity":1,"message":"201","line":28,"column":8,"nodeType":"179","messageId":"180","endLine":28,"endColumn":15},{"ruleId":"177","severity":1,"message":"202","line":29,"column":8,"nodeType":"179","messageId":"180","endLine":29,"endColumn":14},{"ruleId":"177","severity":1,"message":"203","line":30,"column":8,"nodeType":"179","messageId":"180","endLine":30,"endColumn":14},{"ruleId":"177","severity":1,"message":"204","line":31,"column":8,"nodeType":"179","messageId":"180","endLine":31,"endColumn":14},{"ruleId":"177","severity":1,"message":"205","line":32,"column":8,"nodeType":"179","messageId":"180","endLine":32,"endColumn":14},{"ruleId":"177","severity":1,"message":"206","line":33,"column":8,"nodeType":"179","messageId":"180","endLine":33,"endColumn":19},{"ruleId":"177","severity":1,"message":"207","line":34,"column":8,"nodeType":"179","messageId":"180","endLine":34,"endColumn":19},{"ruleId":"177","severity":1,"message":"208","line":35,"column":8,"nodeType":"179","messageId":"180","endLine":35,"endColumn":14},{"ruleId":"173","replacedBy":"209"},{"ruleId":"175","replacedBy":"210"},{"ruleId":"177","severity":1,"message":"211","line":2,"column":22,"nodeType":"179","messageId":"180","endLine":2,"endColumn":33},{"ruleId":"177","severity":1,"message":"212","line":10,"column":10,"nodeType":"179","messageId":"180","endLine":10,"endColumn":19},{"ruleId":"189","severity":1,"message":"190","line":105,"column":21,"nodeType":"191","endLine":105,"endColumn":116},{"ruleId":"189","severity":1,"message":"190","line":126,"column":21,"nodeType":"191","endLine":126,"endColumn":112},{"ruleId":"181","severity":1,"message":"182","line":28,"column":17,"nodeType":"183","messageId":"184","endLine":28,"endColumn":19},{"ruleId":"173","replacedBy":"213"},{"ruleId":"175","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":15,"column":13,"nodeType":"191","endLine":15,"endColumn":72},{"ruleId":"177","severity":1,"message":"217","line":1,"column":17,"nodeType":"179","messageId":"180","endLine":1,"endColumn":25},{"ruleId":"177","severity":1,"message":"218","line":2,"column":10,"nodeType":"179","messageId":"180","endLine":2,"endColumn":14},{"ruleId":"177","severity":1,"message":"219","line":4,"column":8,"nodeType":"179","messageId":"180","endLine":4,"endColumn":25},{"ruleId":"215","severity":1,"message":"216","line":25,"column":13,"nodeType":"191","endLine":25,"endColumn":49},{"ruleId":"215","severity":1,"message":"216","line":27,"column":23,"nodeType":"191","endLine":27,"endColumn":42},{"ruleId":"173","replacedBy":"220"},{"ruleId":"175","replacedBy":"221"},{"ruleId":"177","severity":1,"message":"222","line":4,"column":9,"nodeType":"179","messageId":"180","endLine":4,"endColumn":28},{"ruleId":"177","severity":1,"message":"223","line":7,"column":9,"nodeType":"179","messageId":"180","endLine":7,"endColumn":18},{"ruleId":"177","severity":1,"message":"224","line":16,"column":12,"nodeType":"179","messageId":"180","endLine":16,"endColumn":23},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"no-unused-vars","'setUserTopic' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dataDS' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["227"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["228"],"'logo' is defined but never used.","'Header' is defined but never used.","'Link' is defined but never used.","'Nav' is defined but never used.","'array' is defined but never used.","'stack1' is defined but never used.","'stack2' is defined but never used.","'stack31' is defined but never used.","'stack32' is defined but never used.","'stack4' is defined but never used.","'queue1' is defined but never used.","'queue2' is defined but never used.","'queue3' is defined but never used.","'linkedlist1' is defined but never used.","'linkedlist2' is defined but never used.","'graph1' is defined but never used.",["225"],["226"],"'useLocation' is defined but never used.","'FaWindows' is defined but never used.",["225"],["226"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useState' is defined but never used.","'Card' is defined but never used.","'contestbackground' is defined but never used.",["225"],["226"],"'AiFillTwitterCircle' is defined but never used.","'AiFillTag' is defined but never used.","'RouteChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"229","fix":"231"},"Update the dependencies array to be: [dataDS, id, userTopic]",{"range":"232","text":"233"},{"range":"234","text":"233"},[981,992],"[dataDS, id, userTopic]",[842,853]]